{"version":3,"sources":["room.ts"],"names":["output","require","towers","terrain","settings","getSettingsForLevel","room","init","rooms","subTimeStart","Game","cpu","getUsed","energyInRooms","returnvalue","_","map","closestHostiles","find","FIND_HOSTILE_CREEPS","Memory","enemys","name","size","getTower","read","canBuildMediumCreep","energyAvailable","generalSettings","costs","medium","canBuildBigCreep","big","containers","FIND_STRUCTURES","filter","structure","structureType","containerToTransfer","undefined","containerToGetFrom","energyAmountInContainer","energyMaxAmountInContainer","container","containerData","pos","id","proxyContainer","store","RESOURCE_ENERGY","storeCapacity","isFull","concat","duration","toFixed","workTimes","module","exports"],"mappings":";;AAAA,IAAIA,SAASC,QAAQ,UAAR,CAAb;AACA,IAAIC,SAASD,QAAQ,SAAR,CAAb;AACA,IAAIE,UAAUF,QAAQ,WAAR,CAAd;AAEA,IAAIG,WAAWH,QAAQ,YAAR,EAAsBI,mBAAtB,EAAf;AAEA,IAAIC,OAAO;AACPC,UAAM,cAACC,KAAD,EAAa;AACf,YAAIC,eAAaC,KAAKC,GAAL,CAASC,OAAT,EAAjB;AACAZ,eAAOa,aAAP,CAAqBL,KAArB;AACA,YAAIM,cAAeC,EAAEC,GAAF,CAAMR,KAAN,EAAa,gBAAI;AAChC;AACA,gBAAIS,kBAAkBX,KAAKY,IAAL,CAAUC,mBAAV,CAAtB;AACAC,mBAAOC,MAAP,CAAcf,KAAKgB,IAAnB,IAA2BP,EAAEQ,IAAF,CAAON,eAAP,CAA3B;AAEA;AACAf,mBAAOsB,QAAP,CAAgBlB,IAAhB;AACAA,mBAAOH,QAAQsB,IAAR,CAAanB,IAAb,CAAP;AAEAA,iBAAKoB,mBAAL,GAA2BpB,KAAKqB,eAAL,IAAwBvB,SAASwB,eAAT,CAAyBC,KAAzB,CAA+BC,MAAlF;AACAxB,iBAAKyB,gBAAL,GAAwBzB,KAAKqB,eAAL,IAAwBvB,SAASwB,eAAT,CAAyBC,KAAzB,CAA+BG,GAA/E;AAEA,gBAAIC,aAAa3B,KAAKY,IAAL,CAAUgB,eAAV,EAA2B;AACxCC,wBAAQ,gBAACC,SAAD,EAAU;AACd,2BAAOA,UAAUC,aAAV,KAA4B,WAAnC;AACH;AAHuC,aAA3B,CAAjB;AAMA,gBAAG/B,KAAKgC,mBAAL,KAA6BC,SAAhC,EAA0C;AACtCjC,qBAAKgC,mBAAL,GAA2B,EAA3B;AACH;AACD,gBAAGhC,KAAKkC,kBAAL,KAA4BD,SAA/B,EAAyC;AACrCjC,qBAAKkC,kBAAL,GAA0B,EAA1B;AACH;AAED,gBAAIC,0BAA0B,CAA9B;AACA,gBAAIC,6BAA6B,CAAjC;AACAT,uBAAWjB,GAAX,CAAe,UAAC2B,SAAD,EAA8B;AACzC,oBAAIC,gBAAgB,CAAC;AACjB,2BAAMD,UAAUE,GADC;AAEjB,8BAAU;AAFO,iBAAD,CAApB;AAIA,oBAAGF,UAAUG,EAAV,KAAiB1B,OAAO2B,cAAP,CAAsBD,EAA1C,EAA6C;AACzC,wBAAGH,UAAUK,KAAV,CAAgBC,eAAhB,IAAmCN,UAAUO,aAAhD,EAA+D;AAC3DN,sCAAc,CAAd,EAAiBO,MAAjB,GAA0B,KAA1B;AACA7C,6BAAKgC,mBAAL,GAA2B,GAAGc,MAAH,CAAU9C,KAAKgC,mBAAf,EAAoCM,aAApC,CAA3B;AACH;AACD,wBAAGD,UAAUK,KAAV,CAAgBC,eAAhB,IAAmC,CAAtC,EAAwC;AACpC3C,6BAAKkC,kBAAL,GAA0B,GAAGY,MAAH,CAAU9C,KAAKkC,kBAAf,EAAmCI,aAAnC,CAA1B;AACH;AACJ;AAEDH,2CAA2BE,UAAUK,KAAV,CAAgBC,eAAhB,CAA3B;AACAP,8CAA8BC,UAAUO,aAAxC;AACH,aAjBD;AAkBA,mBAAO5C,IAAP;AACH,SA9CkB,CAAnB;AA+CA,YAAI+C,WAAS,CAAC3C,KAAKC,GAAL,CAASC,OAAT,KAAmBH,YAApB,EAAkC6C,OAAlC,CAA0C,CAA1C,CAAb;AACAtD,eAAOuD,SAAP,CAAiB,0CAAwCF,QAAzD;AACA,eAAOvC,WAAP;AACH;AAtDM,CAAX;AAyDA0C,OAAOC,OAAP,GAAiBnD,IAAjB","file":"room.js","sourcesContent":["let output = require('./output')\r\nlet towers = require('./tower')\r\nlet terrain = require('./terrain')\r\n\r\nlet settings = require('./settings').getSettingsForLevel()\r\n\r\nlet room = {\r\n    init: (rooms:[Room])=>{\r\n        let subTimeStart=Game.cpu.getUsed();\r\n        output.energyInRooms(rooms)\r\n        let returnvalue =  _.map(rooms, room =>{\r\n            // Set amount of enemys in a room\r\n            let closestHostiles = room.find(FIND_HOSTILE_CREEPS)\r\n            Memory.enemys[room.name] = _.size(closestHostiles)\r\n\r\n            // Run Tower for specific ID\r\n            towers.getTower(room)\r\n            room = terrain.read(room)\r\n\r\n            room.canBuildMediumCreep = room.energyAvailable >= settings.generalSettings.costs.medium\r\n            room.canBuildBigCreep = room.energyAvailable >= settings.generalSettings.costs.big\r\n\r\n            let containers = room.find(FIND_STRUCTURES, {\r\n                filter: (structure) => {\r\n                    return structure.structureType === \"container\"\r\n                }\r\n            })\r\n\r\n            if(room.containerToTransfer === undefined){\r\n                room.containerToTransfer = []\r\n            }\r\n            if(room.containerToGetFrom === undefined){\r\n                room.containerToGetFrom = []\r\n            }\r\n\r\n            let energyAmountInContainer = 0\r\n            let energyMaxAmountInContainer = 0\r\n            containers.map((container:Container|Structure) =>{\r\n                let containerData = [{\r\n                    \"pos\":container.pos,\r\n                    \"isFull\": true\r\n                }]\r\n                if(container.id !== Memory.proxyContainer.id){\r\n                    if(container.store[RESOURCE_ENERGY] < container.storeCapacity) {\r\n                        containerData[0].isFull = false\r\n                        room.containerToTransfer = [].concat(room.containerToTransfer, containerData)\r\n                    }\r\n                    if(container.store[RESOURCE_ENERGY] > 0){\r\n                        room.containerToGetFrom = [].concat(room.containerToGetFrom, containerData)\r\n                    }\r\n                }\r\n\r\n                energyAmountInContainer += container.store[RESOURCE_ENERGY]\r\n                energyMaxAmountInContainer += container.storeCapacity\r\n            })\r\n            return room\r\n        })\r\n        let duration=(Game.cpu.getUsed()-subTimeStart).toFixed(0);\r\n        output.workTimes(\"ROOM INIT TOOK                       \"+duration)\r\n        return returnvalue\r\n    }\r\n}\r\n\r\nmodule.exports = room"]}