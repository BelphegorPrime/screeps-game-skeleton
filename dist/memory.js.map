{"version":3,"sources":["memory.ts"],"names":["output","require","settings","getSettingsForLevel","memoryHelper","init","rooms","generalSettings","initDB","subTimeStart","Game","cpu","getUsed","_","map","Memory","undefined","lastTickTime","lengthLastTickTime","areas","room","name","terrain","terrainX","sources","find","FIND_SOURCES","source","id","proxyContainer","memoryClearCounter","paths","enemys","duration","toFixed","workTimes","clear","Object","keys","creeps","length","creep","creepName","console","log","module","exports"],"mappings":"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","file":"memory.js","sourcesContent":["let output = require('./output')\r\nlet settings = require('./settings').getSettingsForLevel()\r\nlet memoryHelper = {\r\n    init: (rooms)=>{\r\n        if(settings.generalSettings.initDB){\r\n            let subTimeStart=Game.cpu.getUsed();\r\n            _.map(rooms, room =>{\r\n                // INIT CPU DATABASE\r\n                if(Memory.cpu === undefined){Memory.cpu = {}}\r\n                if(Memory.cpu.lastTickTime === undefined){Memory.cpu.lastTickTime = []}\r\n                if(Memory.cpu.lastTickTime[0] === undefined){Memory.cpu.lastTickTime[0] = []}\r\n                if(Memory.cpu.lengthLastTickTime === undefined){Memory.cpu.lengthLastTickTime = 0}\r\n\r\n                // INIT TERRAIN DATABASE\r\n                if(Memory.areas === undefined){Memory.areas ={}}\r\n                if(Memory.areas[room.name] === undefined){Memory.areas[room.name] = []}\r\n                if(Memory.terrain === undefined){Memory.terrain ={}}\r\n                if(Memory.terrain[room.name] === undefined){Memory.terrain[room.name] =[]}\r\n                if(Memory.terrain[room.name][0] === undefined){Memory.terrain[room.name][0] =[]}\r\n                if(Memory.terrainX === undefined) {Memory.terrainX = 0}\r\n\r\n                // INIT SOURCE DATABASE\r\n                if(Memory.sources === undefined){Memory.sources = {}}\r\n                if(Memory.sources[room.name] === undefined){Memory.sources[room.name] = {}}\r\n                let sources = room.find(FIND_SOURCES)\r\n                _.map(sources, source =>{\r\n                    if(Memory.sources[room.name][source.id] === undefined){Memory.sources[room.name][source.id] = {}}\r\n                })\r\n\r\n                // INIT PROXYCONTAINER DATABASE\r\n                if(Memory.proxyContainer === undefined){Memory.proxyContainer = {}}\r\n\r\n                // INIT MEMORY CLEAR COUNTER DATABASE\r\n                if(Memory.memoryClearCounter === undefined){Memory.memoryClearCounter = 0}\r\n\r\n                // INIT PATH DATABASE\r\n                if(Memory.paths === undefined){Memory.paths = {}}\r\n                if(Memory.paths[room.name] === undefined){Memory.paths[room.name] = {}}\r\n\r\n                // INIT ENEMYS PRESENT\r\n                if(Memory.enemys === undefined){Memory.enemys ={}}\r\n                if(Memory.enemys[room.name] === undefined){Memory.enemys[room.name] = 0}\r\n            })\r\n            let duration=(Game.cpu.getUsed()-subTimeStart).toFixed(0);\r\n            output.workTimes(\"MEMORY INIT TOOK                     \"+duration)\r\n        }\r\n        memoryHelper.clear()\r\n    },\r\n    clear:()=>{\r\n        if(Memory.memoryClearCounter === settings.generalSettings.memoryClearCounter){\r\n            Memory.memoryClearCounter = 0\r\n            // Cleanup Memory\r\n            let subTimeStart=Game.cpu.getUsed();\r\n            if(Object.keys(Game.creeps).length !== Object.keys(Memory.creeps).length){\r\n                _.map(Memory.creeps, (creep, creepName) =>{\r\n                    if(!Game.creeps[creepName]) {\r\n                        delete Memory.creeps[creepName]\r\n                        console.log('Clearing non-existing creep memory: ', creepName)\r\n                    }\r\n                })\r\n            }\r\n            let duration=(Game.cpu.getUsed()-subTimeStart).toFixed(0);\r\n            output.workTimes(\"MEMORY CLEANUP TOOK                  \"+duration)\r\n        }\r\n        Memory.memoryClearCounter = Memory.memoryClearCounter+1\r\n    },\r\n}\r\n\r\nmodule.exports = memoryHelper"]}