{"version":3,"sources":["output.ts"],"names":["tickMessage","debugText","workTimes","output","energyInRooms","rooms","rows","_","map","energyAmountInContainer","energyMaxAmountInContainer","room","find","FIND_STRUCTURES","filter","structure","structureType","STRUCTURE_CONTAINER","container","store","RESOURCE_ENERGY","storeCapacity","name","energyAvailable","energyCapacityAvailable","showCreepRoles","creeps","settingsRoles","amountOfLittleHarvester","amountOfLittleUpgrader","amountOfLittleBuilder","amountOfLittleLoader","amountOfMediumHarvester","amountOfMediumUpgrader","amountOfMediumBuilder","amountOfMediumLoader","amountOfBigHarvester","amountOfBigUpgrader","amountOfBigBuilder","amountOfBigLoader","amountOfSourceproxy","creep","memory","type","role","harvester","upgrader","builder","loader","sourceproxy","harvesterSum","upgraderSum","builderSum","loaderSum","sourceproxySum","littleSum","mediumSum","bigSum","littleRow","mediumRow","bigRow","sourceProxyRow","summRow","writeCPU","cpu","limit","tickLimit","bucket","writeToDebug","text","JSON","stringify","resetLog","writeLog","console","log","module","exports"],"mappings":"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","file":"output.js","sourcesContent":["let tickMessage = \"\\n\"\r\nlet debugText = \"\\n\"\r\nlet workTimes = \"\\n\"\r\nlet output = {\r\n\r\n    energyInRooms: (rooms)=>{\r\n        let rows = _.map(rooms, room => {\r\n            let energyAmountInContainer = 0\r\n            let energyMaxAmountInContainer = 0\r\n            room.find(FIND_STRUCTURES, {\r\n                filter: (structure) => {return structure.structureType === STRUCTURE_CONTAINER}\r\n            }).map(container =>{\r\n                energyAmountInContainer += container.store[RESOURCE_ENERGY]\r\n                energyMaxAmountInContainer += container.storeCapacity\r\n            })\r\n            return room.name+\"   | \"+room.energyAvailable + \"/\" + room.energyCapacityAvailable+\"     | \"\r\n                    +energyAmountInContainer + \"/\" + energyMaxAmountInContainer+\r\n                    \"            |                  |                 |\"\r\n        })\r\n        tickMessage += \"ROOMNAME | ROOM_ENERGY | CONTAINER_ENERGY  |                  |                 |\\n\"+rows+\"\\n\"\r\n    },\r\n    showCreepRoles: (rooms, creeps, settingsRoles)=>{\r\n        let amountOfLittleHarvester = 0\r\n        let amountOfLittleUpgrader = 0\r\n        let amountOfLittleBuilder = 0\r\n        let amountOfLittleLoader = 0\r\n        let amountOfMediumHarvester = 0\r\n        let amountOfMediumUpgrader = 0\r\n        let amountOfMediumBuilder = 0\r\n        let amountOfMediumLoader = 0\r\n        let amountOfBigHarvester = 0\r\n        let amountOfBigUpgrader = 0\r\n        let amountOfBigBuilder = 0\r\n        let amountOfBigLoader = 0\r\n        let amountOfSourceproxy = 0\r\n\r\n        _.map(creeps, creep =>{\r\n            if(creep.memory.type === \"little\"){\r\n                if(creep.memory.role === settingsRoles.harvester){\r\n                    amountOfLittleHarvester += 1\r\n                }\r\n                if(creep.memory.role === settingsRoles.upgrader){\r\n                    amountOfLittleUpgrader += 1\r\n                }\r\n                if(creep.memory.role === settingsRoles.builder){\r\n                    amountOfLittleBuilder += 1\r\n                }\r\n                if(creep.memory.role === settingsRoles.loader){\r\n                    amountOfLittleLoader += 1\r\n                }\r\n            }else if(creep.memory.type === \"medium\"){\r\n                if(creep.memory.role === settingsRoles.harvester){\r\n                    amountOfMediumHarvester += 1\r\n                }\r\n                if(creep.memory.role === settingsRoles.upgrader){\r\n                    amountOfMediumUpgrader += 1\r\n                }\r\n                if(creep.memory.role === settingsRoles.builder){\r\n                    amountOfMediumBuilder += 1\r\n                }\r\n                if(creep.memory.role === settingsRoles.loader){\r\n                    amountOfMediumLoader += 1\r\n                }\r\n            }else if(creep.memory.type === \"big\"){\r\n                if(creep.memory.role === settingsRoles.harvester){\r\n                    amountOfBigHarvester += 1\r\n                }\r\n                if(creep.memory.role === settingsRoles.upgrader){\r\n                    amountOfBigUpgrader += 1\r\n                }\r\n                if(creep.memory.role === settingsRoles.builder){\r\n                    amountOfBigBuilder += 1\r\n                }\r\n                if(creep.memory.role === settingsRoles.loader){\r\n                    amountOfBigLoader += 1\r\n                }\r\n            }\r\n\r\n            if(creep.memory.type === settingsRoles.sourceproxy){\r\n                amountOfSourceproxy += 1\r\n            }\r\n        })\r\n\r\n        let rows = _.map(rooms, room => {\r\n\r\n            let harvesterSum = amountOfLittleHarvester+amountOfMediumHarvester+amountOfBigHarvester\r\n            let upgraderSum = amountOfLittleUpgrader+amountOfMediumUpgrader+amountOfBigUpgrader\r\n            let builderSum = amountOfLittleBuilder+amountOfMediumBuilder+amountOfBigBuilder\r\n            let loaderSum = amountOfLittleLoader+amountOfMediumLoader+amountOfBigLoader\r\n            let sourceproxySum = amountOfSourceproxy\r\n\r\n            let littleSum = amountOfLittleHarvester+amountOfLittleUpgrader+amountOfLittleBuilder+amountOfLittleLoader\r\n            let mediumSum = amountOfMediumHarvester+amountOfMediumUpgrader+amountOfMediumBuilder+amountOfMediumLoader\r\n            let bigSum    = amountOfBigHarvester+amountOfBigUpgrader+amountOfBigBuilder+amountOfBigLoader\r\n\r\n            let littleRow         = room.name+\"   | LITTLE:     |         \"+amountOfLittleHarvester+\"         |        \"+amountOfLittleUpgrader+\"         |        \"+amountOfLittleBuilder+\"        |         \"+amountOfLittleLoader+\"        |         \"+\" \"                +\"        |         \"+littleSum+\"\\n\"\r\n            let mediumRow         =     \"         | MEDIUM:     |         \"+amountOfMediumHarvester+\"         |        \"+amountOfMediumUpgrader+\"         |        \"+amountOfMediumBuilder+\"        |         \"+amountOfMediumLoader+\"        |         \"+\" \"                +\"        |         \"+mediumSum+\"\\n\"\r\n            let bigRow            =     \"         | BIG:        |         \"+amountOfBigHarvester   +\"         |        \"+amountOfBigUpgrader   +\"         |        \"+amountOfBigBuilder   +\"        |         \"+amountOfBigLoader   +\"        |         \"+\" \"                +\"        |         \"+bigSum+\"\\n\"\r\n            let sourceProxyRow    =     \"         | PROXY:      |         \"+\" \"                    +\"         |        \"+\" \"                   +\"         |        \"+\" \"                  +\"        |         \"+\" \"                 +\"        |         \"+amountOfSourceproxy+\"        |         \"+sourceproxySum+\"\\n\"\r\n            let summRow           =     \"         |             |         \"+harvesterSum           +\"         |        \"+upgraderSum           +\"         |        \"+builderSum           +\"        |         \"+loaderSum           +\"        |         \"+sourceproxySum     +\"        |         \"\r\n\r\n            return littleRow + mediumRow + bigRow + sourceProxyRow + summRow\r\n        })\r\n\r\n        tickMessage += \"         |     TYPE    |     HARVESTER     |     UPGRADER     |     BUILDER     |      LOADER      |    SOURCEPROXY   |\\n\"+rows +\"\\n\"\r\n    },\r\n    writeCPU: (cpu) =>{\r\n        tickMessage += \"CPU-Limit: \"+cpu.limit + \" | Tick-Limit: \"+ cpu.tickLimit+ \" | Bucket: \"+ cpu.bucket+\"\\n\"\r\n    },\r\n    writeToDebug: (text)=>{\r\n        debugText += JSON.stringify(text)+\"\\n\"\r\n    },\r\n    workTimes: (text)=>{\r\n        workTimes += text+\"\\n\"\r\n    },\r\n    resetLog: ()=>{\r\n        tickMessage = \"\\n\"\r\n        debugText = \"\\n\"\r\n        workTimes = \"\\n\"\r\n    },\r\n    writeLog: ()=>{\r\n        console.log(tickMessage+workTimes+debugText)\r\n        output.resetLog()\r\n    }\r\n}\r\n\r\nmodule.exports = output"]}