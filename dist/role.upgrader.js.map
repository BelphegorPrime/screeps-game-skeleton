{"version":3,"sources":["role.upgrader.ts"],"names":["output","require","routerHelper","roleUpgrader","run","creep","memory","upgrading","carry","energy","say","carryCapacity","upgradeController","room","controller","ERR_NOT_IN_RANGE","routeCreep","visualizePathStyle","stroke","source","undefined","structureType","store","withdraw","RESOURCE_ENERGY","harvest","fallbackSource","module","exports"],"mappings":";;AAAA,IAAIA,SAASC,QAAQ,UAAR,CAAb;AACA,IAAIC,eAAeD,QAAQ,UAAR,CAAnB;AACA,IAAIE,eAAe;AACfC,SAAK,aAACC,KAAD,EAAM;AACP,YAAGA,MAAMC,MAAN,CAAaC,SAAb,IAA0BF,MAAMG,KAAN,CAAYC,MAAZ,KAAuB,CAApD,EAAuD;AACnDJ,kBAAMC,MAAN,CAAaC,SAAb,GAAyB,KAAzB;AACAF,kBAAMK,GAAN,CAAU,SAAV;AACH;AACD,YAAG,CAACL,MAAMC,MAAN,CAAaC,SAAd,IAA2BF,MAAMG,KAAN,CAAYC,MAAZ,KAAuBJ,MAAMM,aAA3D,EAA0E;AACtEN,kBAAMC,MAAN,CAAaC,SAAb,GAAyB,IAAzB;AACAF,kBAAMK,GAAN,CAAU,SAAV;AACH;AAED,YAAGL,MAAMC,MAAN,CAAaC,SAAhB,EAA2B;AACvB,gBAAGF,MAAMO,iBAAN,CAAwBP,MAAMQ,IAAN,CAAWC,UAAnC,MAAmDC,gBAAtD,EAAwE;AACpEb,6BAAac,UAAb,CAAwBX,KAAxB,EAA+BA,MAAMQ,IAAN,CAAWC,UAA1C,EAAsD,EAACG,oBAAoB,EAACC,QAAQ,SAAT,EAArB,EAAtD;AACH;AACJ,SAJD,MAIM;AACF,gBAAGb,MAAMC,MAAN,CAAaa,MAAb,KAAwBC,SAA3B,EAAqC;AACjC,oBAAGf,MAAMC,MAAN,CAAaa,MAAb,CAAoBE,aAApB,KAAsC,WAAzC,EAAqD;AACjD,wBAAGhB,MAAMC,MAAN,CAAaa,MAAb,CAAoBG,KAApB,CAA0Bb,MAA1B,GAAmC,CAAtC,EAAwC;AACpC,4BAAGJ,MAAMkB,QAAN,CAAelB,MAAMC,MAAN,CAAaa,MAA5B,EAAoCK,eAApC,MAAyDT,gBAA5D,EAA8E;AAC1Eb,yCAAac,UAAb,CAAwBX,KAAxB,EAA+BA,MAAMC,MAAN,CAAaa,MAA5C,EAAoD,EAACF,oBAAoB,EAACC,QAAQ,SAAT,EAArB,EAApD;AACH;AACJ,qBAJD,MAIK;AACD,4BAAGb,MAAMoB,OAAN,CAAcpB,MAAMC,MAAN,CAAaoB,cAA3B,MAA+CX,gBAAlD,EAAoE;AAChEb,yCAAac,UAAb,CAAwBX,KAAxB,EAA+BA,MAAMC,MAAN,CAAaoB,cAA5C,EAA4D,EAACT,oBAAoB,EAACC,QAAQ,SAAT,EAArB,EAA5D;AACH;AACJ;AACJ,iBAVD,MAUK;AACD,wBAAGb,MAAMoB,OAAN,CAAcpB,MAAMC,MAAN,CAAaa,MAA3B,MAAuCJ,gBAA1C,EAA4D;AACxDb,qCAAac,UAAb,CAAwBX,KAAxB,EAA+BA,MAAMC,MAAN,CAAaa,MAA5C,EAAoD,EAACF,oBAAoB,EAACC,QAAQ,SAAT,EAArB,EAApD;AACH;AACJ;AACJ;AACJ;AACJ;AAlCc,CAAnB;AAqCAS,OAAOC,OAAP,GAAiBzB,YAAjB","file":"role.upgrader.js","sourcesContent":["let output = require('./output')\r\nlet routerHelper = require('./router')\r\nlet roleUpgrader = {\r\n    run: (creep) =>{\r\n        if(creep.memory.upgrading && creep.carry.energy === 0) {\r\n            creep.memory.upgrading = false\r\n            creep.say('harvest')\r\n        }\r\n        if(!creep.memory.upgrading && creep.carry.energy === creep.carryCapacity) {\r\n            creep.memory.upgrading = true\r\n            creep.say('upgrade')\r\n        }\r\n\r\n        if(creep.memory.upgrading) {\r\n            if(creep.upgradeController(creep.room.controller) === ERR_NOT_IN_RANGE) {\r\n                routerHelper.routeCreep(creep, creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}})\r\n            }\r\n        }else {\r\n            if(creep.memory.source !== undefined){\r\n                if(creep.memory.source.structureType === \"container\"){\r\n                    if(creep.memory.source.store.energy > 0){\r\n                        if(creep.withdraw(creep.memory.source, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\r\n                            routerHelper.routeCreep(creep, creep.memory.source, {visualizePathStyle: {stroke: '#ffaa00'}})\r\n                        }\r\n                    }else{\r\n                        if(creep.harvest(creep.memory.fallbackSource) === ERR_NOT_IN_RANGE) {\r\n                            routerHelper.routeCreep(creep, creep.memory.fallbackSource, {visualizePathStyle: {stroke: '#ffaa00'}})\r\n                        }\r\n                    }\r\n                }else{\r\n                    if(creep.harvest(creep.memory.source) === ERR_NOT_IN_RANGE) {\r\n                        routerHelper.routeCreep(creep, creep.memory.source, {visualizePathStyle: {stroke: '#ffaa00'}})\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = roleUpgrader"]}