{"version":3,"sources":["main.ts"],"names":["_","roleHarvester","require","roleUpgrader","roleBuilder","roleLoader","roleSourceProxy","room","creepsHelper","memoryHelper","settings","getSettingsForLevel","module","exports","loop","subTimeStart","Game","cpu","getUsed","init","rooms","creeps","size","getCreeps","constructionSites","spawnCreeps","spawns","subTimeCreepsRun","map","creep","Memory","enemys","name","run","subTimeCreepRun","memory","role","generalSettings","roles","harvester","upgrader","builder","loader","sourceproxy","durationCreepRun","toFixed","writeToDebug","durationCreepsRun","workTimes","iteration","lengthLastTickTime","amountOfLastTimeTicksToSave","lastTickTime","duration","concat","showCreepRoles","writeCPU","writeLog"],"mappings":"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","file":"main.js","sourcesContent":["import * as _ from \"lodash\"\n// notice to myself: \"lodash version is 3.10.1 :O\"\n\nlet roleHarvester = require('./role.harvester')\nlet roleUpgrader = require('./role.upgrader')\nlet roleBuilder = require('./role.builder')\nlet roleLoader = require('./role.loader')\nlet roleSourceProxy = require('./role.sourceproxy')\n\nlet room = require('./room')\nlet creepsHelper = require('./creeps')\nlet memoryHelper = require('./memory')\n\nimport output from \"./output\"\nlet settings = require('./settings').getSettingsForLevel()\n\nmodule.exports.loop = () =>{\n\n    let subTimeStart=Game.cpu.getUsed();\n\n    memoryHelper.init(Game.rooms)\n\n    // Get Roominformations and extend the Room Object\n    Game.rooms = room.init(Game.rooms)\n\n    // Give every small and big Creep its role and source\n    let creeps = []\n    if(_.size(Game.creeps) > 0){\n        creeps = creepsHelper.getCreeps(Game.creeps, Game.rooms, Game.constructionSites)\n    }\n\n    // Create small and big Creeps\n    creepsHelper.spawnCreeps(Game.rooms, Game.spawns, creeps)\n\n    // Execute Commands for Creeper Role\n    let subTimeCreepsRun=Game.cpu.getUsed();\n    _.map(creeps, (creep:Creep) =>{\n        if(Memory.enemys[creep.room.name] > 0){\n            roleLoader.run(creep)\n        }else{\n            let subTimeCreepRun=Game.cpu.getUsed();\n            if(creep.memory.role === settings.generalSettings.roles.harvester ||\n                creep.memory.role === \"harvester\") {\n                roleHarvester.run(creep)\n            }\n            if(creep.memory.role === settings.generalSettings.roles.upgrader ||\n                creep.memory.role === \"upgrader\") {\n                roleUpgrader.run(creep)\n            }\n            if(creep.memory.role === settings.generalSettings.roles.builder ||\n                creep.memory.role === \"builder\") {\n                roleBuilder.run(creep)\n            }\n            if(creep.memory.role === settings.generalSettings.roles.loader ||\n                creep.memory.role === \"loader\"){\n                roleLoader.run(creep)\n            }\n            if(creep.memory.role === settings.generalSettings.roles.sourceproxy ||\n                creep.memory.role === \"sourceproxy\"){\n                roleSourceProxy.run(creep)\n            }\n            let durationCreepRun=(Game.cpu.getUsed()-subTimeCreepRun).toFixed(0);\n            if(durationCreepRun > 1){\n                output.writeToDebug(creep.memory.role+\" WORKTIME TOOK                 \"+durationCreepRun)\n            }\n        }\n    })\n    let durationCreepsRun=(Game.cpu.getUsed()-subTimeCreepsRun).toFixed(0);\n    output.workTimes(\"CREEPS WORKTIME TOOK                 \"+durationCreepsRun)\n\n    // WRITE ACTUAL TICK TO MEMORY\n    let iteration = Memory.cpu.lengthLastTickTime\n    if(iteration >= settings.generalSettings.amountOfLastTimeTicksToSave){\n        Memory.cpu.lengthLastTickTime = 0\n        iteration = 0\n        Memory.cpu.lastTickTime[0]=[Memory.cpu.lastTickTime[0][_.size(Memory.cpu.lastTickTime[0])-1]]\n    }\n    Memory.cpu.lengthLastTickTime = iteration+1\n\n    let duration=(Game.cpu.getUsed()-subTimeStart).toFixed(0);\n    Memory.cpu.lastTickTime[0] = [].concat(Memory.cpu.lastTickTime[0],duration)\n\n    // CONSOLE OUTPUT\n    output.showCreepRoles(Game.rooms, creeps, settings.generalSettings.roles)\n    output.writeCPU(Game.cpu)\n    output.workTimes(\"All dt: \"+duration)\n    output.writeLog()\n}"]}