{"version":3,"sources":["creeps.ts"],"names":["settings","require","getSettingsForLevel","creepsHelp","getCreeps","allCreeps","rooms","constructionSites","subTimeStart","Game","cpu","getUsed","creeps","_","values","harvester","generalSettings","roles","upgrader","builder","loader","map","room","SourcesToMoveTo","getAvailableSources","size","reverse","value","noProxySource","filter","source","undefined","Memory","sources","name","id","proxySource","minHarvester","creep","memory","role","fallbackSource","proxysource","numberOfBuilder","getNumberOfBuilder","numberOfLoader","getNumberOfLoader","notFullContainer","containerToTransfer","container","isFull","containers","find","FIND_STRUCTURES","structure","structureType","registeredCreeps","energyAvailable","costs","little","index","indexOf","type","sourceproxy","duration","toFixed","workTimes","spawnCreeps","spawns","spawn","littleCreeps","mediumCreeps","bigCreeps","numberLittleCreeps","creepNumber","getUnitNumber","newName","createCreep","WORK","CARRY","MOVE","getRandomID","console","log","canBuildMediumCreep","numberMediumCreeps","mediumCreepNumber","canBuildBigCreep","numberBigCreeps","bigCreepNumber","spawnSourceProxy","sourcesWithOneSlot","amountOfSourceproxyCreeps","writeToDebug","amountOfCreeps","proxyCreeps","proxyCreepPresent","proxyCreep","FIND_SOURCES","energy","amountOfSources","maxCreeps","Math","round","sourceIndex","amountOfSurroundingWalls","terrain","pos","x","y","amountOfSupportCreeps","concat","sourceToReturn","findClosestByRange","proxyContainer","module","exports"],"mappings":"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","file":"creeps.js","sourcesContent":["import output from \"./output\"\r\nimport generalFunctions from \"./general\"\r\nimport roleBuilder from \"./role.builder\"\r\nimport roleLoader from \"./role.loader\"\r\nlet settings = require('./settings').getSettingsForLevel()\r\n\r\nlet creepsHelp = {\r\n    getCreeps: (allCreeps: [Creep], rooms:[Room], constructionSites: [ConstructionSite])=>{\r\n        let subTimeStart:number=Game.cpu.getUsed()\r\n        let creeps = _.values(allCreeps)\r\n        let harvester:string = settings.generalSettings.roles.harvester\r\n        let upgrader:string = settings.generalSettings.roles.upgrader\r\n        let builder:string = settings.generalSettings.roles.builder\r\n        let loader:string = settings.generalSettings.roles.loader\r\n\r\n        _.map(rooms, (room:Room) =>{\r\n            let SourcesToMoveTo = _(creepsHelp.getAvailableSources(creeps, _.size(allCreeps))).reverse().value()\r\n            let noProxySource = SourcesToMoveTo.filter((source: Source) => source!== undefined && Memory.sources[room.name][source.id] !== undefined && Memory.sources[room.name][source.id][\"availableSlots\"] !== 1)[0]\r\n            let proxySource = SourcesToMoveTo.filter((source: Source) => source!== undefined && Memory.sources[room.name][source.id] !== undefined && Memory.sources[room.name][source.id][\"availableSlots\"] === 1)[0]\r\n\r\n            if(_.size(creeps) <= settings.minHarvester){\r\n                creeps= creeps.map((creep:Creep) =>{\r\n                    creep.memory.role = harvester\r\n                    creep.memory.source = noProxySource\r\n                    creep.memory.fallbackSource = noProxySource\r\n                    creep.memory.proxysource = proxySource\r\n                    return creep\r\n                })\r\n                return creeps\r\n            }\r\n\r\n            let numberOfBuilder = roleBuilder.getNumberOfBuilder(constructionSites)\r\n            let numberOfLoader = roleLoader.getNumberOfLoader(room)\r\n            let notFullContainer = room.containerToTransfer.filter((container:Container|Structure) => !container.isFull)\r\n            let containers = room.find(FIND_STRUCTURES, {\r\n                filter: (structure: Container|Structure) => {\r\n                    return structure.structureType === \"container\" && structure.registeredCreeps === undefined\r\n                }\r\n            })\r\n\r\n            if(room.energyAvailable >= settings.generalSettings.costs.little*2 && (_.size(notFullContainer) > 0 || _.size(containers) === 0)){\r\n                creeps= creeps.map((creep:Creep, index) =>{\r\n                    let source = SourcesToMoveTo.filter((source:Source|Structure) =>{\r\n                        if(source.registeredCreeps !== undefined){\r\n                            return source.registeredCreeps.indexOf(creep.id) > -1\r\n                        }else {\r\n                            return false\r\n                        }\r\n                    })[0]\r\n                    if(source !== undefined){\r\n                        if(creep.memory.type === settings.generalSettings.roles.sourceproxy && Memory.sources[creep.room.name][source.id] !== undefined && Memory.sources[creep.room.name][source.id][\"availableSlots\"] === 1){\r\n                            creep.memory.role = settings.generalSettings.roles.sourceproxy\r\n                            creep.memory.source = source\r\n                            creep.memory.fallbackSource = noProxySource\r\n                            creep.memory.proxysource = proxySource\r\n                        }else{\r\n                            if(index < numberOfBuilder ){\r\n                                creep.memory.role = builder\r\n                                creep.memory.source = source\r\n                                creep.memory.fallbackSource = noProxySource\r\n                                creep.memory.proxysource = proxySource\r\n                            }else if(index < numberOfBuilder+numberOfLoader){\r\n                                creep.memory.role = loader\r\n                                creep.memory.source = source\r\n                                creep.memory.fallbackSource = noProxySource\r\n                                creep.memory.proxysource = proxySource\r\n                            }else if(index < numberOfBuilder+numberOfLoader+2){\r\n                                creep.memory.role = harvester\r\n                                creep.memory.source = source\r\n                                creep.memory.fallbackSource = noProxySource\r\n                                creep.memory.proxysource = proxySource\r\n                            }else{\r\n                                creep.memory.role = upgrader\r\n                                creep.memory.source = source\r\n                                creep.memory.fallbackSource = noProxySource\r\n                                creep.memory.proxysource = proxySource\r\n                            }\r\n                        }\r\n                    }else{\r\n                        creep.memory.role = upgrader\r\n                        creep.memory.source = noProxySource\r\n                        creep.memory.fallbackSource = noProxySource\r\n                        creep.memory.proxysource = proxySource\r\n                    }\r\n                    return creep\r\n                })\r\n            }else{\r\n                creeps= creeps.map((creep:Creep, index) =>{\r\n                    let source = SourcesToMoveTo.filter((source:Source|Structure) =>{\r\n                        if(source !== undefined && source.registeredCreeps !== undefined){\r\n                            return source.registeredCreeps.indexOf(creep.id) > -1\r\n                        }else {\r\n                            return false\r\n                        }\r\n                    })[0]\r\n                    if(source !== undefined){\r\n                        if(creep.memory.type === settings.generalSettings.roles.sourceproxy &&  Memory.sources[creep.room.name][source.id] !== undefined && Memory.sources[creep.room.name][source.id][\"availableSlots\"] === 1){\r\n                            creep.memory.role = settings.generalSettings.roles.sourceproxy\r\n                            creep.memory.source = source\r\n                            creep.memory.fallbackSource = noProxySource\r\n                            creep.memory.proxysource = proxySource\r\n                        }else{\r\n                            if(index < numberOfBuilder ){\r\n                                creep.memory.role = builder\r\n                                creep.memory.source = source\r\n                                creep.memory.fallbackSource = noProxySource\r\n                                creep.memory.proxysource = proxySource\r\n                            }else if(index < numberOfBuilder+numberOfLoader){\r\n                                creep.memory.role = loader\r\n                                creep.memory.source = source\r\n                                creep.memory.fallbackSource = noProxySource\r\n                                creep.memory.proxysource = proxySource\r\n                            }else if(index < numberOfBuilder+numberOfLoader+2){\r\n                                creep.memory.role = upgrader\r\n                                creep.memory.source = source\r\n                                creep.memory.fallbackSource = noProxySource\r\n                                creep.memory.proxysource = proxySource\r\n                            }else{\r\n                                creep.memory.role = harvester\r\n                                creep.memory.source = source\r\n                                creep.memory.fallbackSource = noProxySource\r\n                                creep.memory.proxysource = proxySource\r\n                            }\r\n                        }\r\n                    }else{\r\n                        creep.memory.role = harvester\r\n                        creep.memory.source = noProxySource\r\n                        creep.memory.fallbackSource = noProxySource\r\n                        creep.memory.proxysource = proxySource\r\n                    }\r\n                    return creep\r\n                })\r\n            }\r\n        })\r\n        let duration=(Game.cpu.getUsed()-subTimeStart).toFixed(0);\r\n        output.workTimes(\"CREEPS GET ROLE TOOK                 \"+duration)\r\n        return creeps\r\n    },\r\n    spawnCreeps: (rooms:[Room], spawns:[Spawn], creeps:[Creep])=>{\r\n        let subTimeStart=Game.cpu.getUsed();\r\n        _.map(rooms, room =>{\r\n            _.map(spawns, spawn=>{\r\n                if(room.name === spawn.room.name){\r\n                    let littleCreeps = creeps.filter(creep => creep.memory.type === \"little\")\r\n                    let mediumCreeps = creeps.filter(creep => creep.memory.type === \"medium\")\r\n                    let bigCreeps = creeps.filter(creep => creep.memory.type === \"big\")\r\n                    if(_.size(littleCreeps) < settings.numberLittleCreeps){\r\n                        let creepNumber =generalFunctions.getUnitNumber(littleCreeps)\r\n                        let newName = spawn.createCreep(\r\n                            [WORK,CARRY,MOVE],\r\n                            \"LittleCreep-\"+creepNumber+\"|\"+generalFunctions.getRandomID(),\r\n                            {role: settings.generalSettings.roles.harvester, type: \"little\"}\r\n                        )\r\n                        console.log('Spawning new littleCreep ' + newName+\" within the room \"+room.name)\r\n                    }\r\n\r\n                    if(room.canBuildMediumCreep && _.size(mediumCreeps) < settings.numberMediumCreeps){\r\n                        let mediumCreepNumber =generalFunctions.getUnitNumber(mediumCreeps)\r\n                        let newName = spawn.createCreep(\r\n                            [WORK,WORK,WORK,WORK,CARRY,MOVE,MOVE],\r\n                            \"MediumCreep-\"+mediumCreepNumber+\"|\"+generalFunctions.getRandomID(),\r\n                            {role: settings.generalSettings.roles.harvester, type: \"medium\"}\r\n                        )\r\n                        console.log('Spawning new mediumCreep ' + newName+\" within the room \"+room.name)\r\n                    }\r\n\r\n                    if(room.canBuildBigCreep && _.size(bigCreeps) < settings.numberBigCreeps){\r\n                        let bigCreepNumber =generalFunctions.getUnitNumber(bigCreeps)\r\n                        let newName = spawn.createCreep(\r\n                            [WORK,WORK,WORK,WORK,WORK,CARRY,CARRY,CARRY,MOVE,MOVE,MOVE],\r\n                            \"BigCreep-\"+bigCreepNumber+\"|\"+generalFunctions.getRandomID(),\r\n                            {role: settings.generalSettings.roles.harvester, type: \"big\"}\r\n                        )\r\n                        console.log('Spawning new bigCreep ' + newName+\" within the room \"+room.name)\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        let duration=(Game.cpu.getUsed()-subTimeStart).toFixed(0);\r\n        output.workTimes(\"SPAWN CREEPS TOOK                    \"+duration)\r\n    },\r\n    spawnSourceProxy: (rooms:[Room], spawns:[Spawn], creeps:[Creep])=>{\r\n        _.map(rooms, (room:Room) =>{\r\n            _.map(spawns, (spawn:Spawn)=>{\r\n                let sourcesWithOneSlot:Array<Source> = _.filter(Memory.sources[room.name], (source:Source) => source[\"availableSlots\"] === 1)\r\n                if(_.size(sourcesWithOneSlot) > 0){\r\n                    let amountOfSourceproxyCreeps:number = _.size(_.filter(creeps, creep => creep.memory.type === \"sourceproxy\"))\r\n                    output.writeToDebug(amountOfSourceproxyCreeps)\r\n                    if(room.canBuildBigCreep && _.size(creeps)>3 && amountOfSourceproxyCreeps === 0){\r\n                        spawn.createCreep([WORK,WORK,WORK,WORK,WORK,WORK,WORK,CARRY,MOVE],\"sourceproxy\",{role: \"sourceproxy\", type: \"sourceproxy\"})\r\n                        output.writeToDebug(\"Spawning new Big SOURCEPROXY within the room \"+room.name)\r\n                    }else{\r\n                        if(room.canBuildMediumCreep && _.size(creeps)>3 && amountOfSourceproxyCreeps === 0){\r\n                            spawn.createCreep([WORK,WORK,WORK,CARRY,MOVE],\"sourceproxy\",{role: \"sourceproxy\", type: \"sourceproxy\"})\r\n                            output.writeToDebug(\"Spawning new Medium SOURCEPROXY within the room \"+room.name)\r\n                        }else {\r\n                            if(_.size(creeps)>3 && amountOfSourceproxyCreeps === 0){\r\n                                spawn.createCreep([WORK,WORK,CARRY,MOVE],\"sourceproxy\",{role: \"sourceproxy\", type: \"sourceproxy\"})\r\n                                output.writeToDebug(\"Spawning new Little SOURCEPROXY within the room \"+room.name)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    },\r\n    getAvailableSources: (creeps:[Creep], amountOfCreeps: number)=>{\r\n        let proxyCreeps= _.filter(creeps, (creep:Creep) => creep.memory.type === settings.generalSettings.roles.sourceproxy)\r\n        let proxyCreepPresent = !!_.size(proxyCreeps)\r\n        let proxyCreep:Object|Creep = {}\r\n        if(!proxyCreepPresent){\r\n            creepsHelp.spawnSourceProxy(Game.rooms , Game.spawns, creeps)\r\n        }else{\r\n            proxyCreep = proxyCreeps[0]\r\n        }\r\n\r\n        return creeps.map((creep:Creep) =>{\r\n            let sources = creep.room.find(FIND_SOURCES)\r\n            sources = sources.filter((source:Source)=> source.energy !== 0)\r\n            let amountOfSources = _.size(sources)\r\n            let maxCreeps = Math.round(amountOfCreeps/amountOfSources)\r\n\r\n            sources = sources.map((source: Source, sourceIndex)=>{\r\n                if(Memory.sources[creep.room.name][source.id][\"availableSlots\"] === undefined){\r\n                    output.writeToDebug(\"Memory.sources[creep.room.name][source.id]['availableSlots'] ist für \"+source.id+\" undefined\")\r\n                    let amountOfSurroundingWalls = 0\r\n                    if(Memory.terrain[creep.room.name][source.pos.x - 1] !== undefined &&\r\n                        Memory.terrain[creep.room.name][source.pos.x] !== undefined &&\r\n                        Memory.terrain[creep.room.name][source.pos.x + 1] !== undefined){\r\n\r\n                        if (Memory.terrain[creep.room.name][source.pos.x - 1][source.pos.y - 1].terrain[0] === \"wall\") {\r\n                            amountOfSurroundingWalls += 1\r\n                        }\r\n                        if (Memory.terrain[creep.room.name][source.pos.x][source.pos.y - 1].terrain[0] === \"wall\") {\r\n                            amountOfSurroundingWalls += 1\r\n                        }\r\n                        if(Memory.terrain[creep.room.name][source.pos.x+1][source.pos.y-1].terrain[0] === \"wall\"){\r\n                            amountOfSurroundingWalls += 1\r\n                        }\r\n                        if(Memory.terrain[creep.room.name][source.pos.x-1][source.pos.y].terrain[0] === \"wall\"){\r\n                            amountOfSurroundingWalls += 1\r\n                        }\r\n                        if(Memory.terrain[creep.room.name][source.pos.x+1][source.pos.y].terrain[0] === \"wall\"){\r\n                            amountOfSurroundingWalls += 1\r\n                        }\r\n                        if(Memory.terrain[creep.room.name][source.pos.x-1][source.pos.y+1].terrain[0] === \"wall\"){\r\n                            amountOfSurroundingWalls += 1\r\n                        }\r\n                        if(Memory.terrain[creep.room.name][source.pos.x][source.pos.y+1].terrain[0] === \"wall\"){\r\n                            amountOfSurroundingWalls += 1\r\n                        }\r\n                        if(Memory.terrain[creep.room.name][source.pos.x+1][source.pos.y+1].terrain[0] === \"wall\"){\r\n                            amountOfSurroundingWalls += 1\r\n                        }\r\n                    }\r\n\r\n                    Memory.sources[creep.room.name][source.id][\"availableSlots\"] = 8 - amountOfSurroundingWalls\r\n                }\r\n\r\n                let sourcesWithOneSlot = _.filter(Memory.sources[creep.room.name], (source:Source) => source[\"availableSlots\"] === 1)\r\n                source.amountOfSupportCreeps = 0\r\n                if(_.size(sourcesWithOneSlot) > 0){\r\n                    if(Memory.sources[creep.room.name][source.id][\"availableSlots\"] === 1){\r\n                        maxCreeps = 1\r\n                        source.amountOfSupportCreeps = Math.round(amountOfCreeps/amountOfSources) - 1\r\n                    }else {\r\n                        maxCreeps = Math.round(amountOfCreeps/amountOfSources)\r\n                        source.amountOfSupportCreeps = 0\r\n                    }\r\n                }\r\n\r\n                if(source.registeredCreeps === undefined){\r\n                    source.registeredCreeps=[]\r\n                }\r\n                if(sourceIndex > 0){\r\n                    if(sources[0].registeredCreeps.indexOf(creep.id)  <= -1 && _.size(source.registeredCreeps) < maxCreeps){\r\n                        source.registeredCreeps = [].concat(source.registeredCreeps, creep.id)\r\n                    }\r\n                }else{\r\n                    if(maxCreeps===1){\r\n                        if(proxyCreepPresent && proxyCreep.id !== undefined && creep.memory.type === settings.generalSettings.roles.sourceproxy){\r\n                            source.registeredCreeps = [].concat(source.registeredCreeps, creep.id)\r\n                        }\r\n                    }\r\n                    if(_.size(source.registeredCreeps) < maxCreeps){\r\n                        source.registeredCreeps = [].concat(source.registeredCreeps, creep.id)\r\n                    }\r\n                }\r\n                return source\r\n            })\r\n\r\n            let sourceToReturn = sources.filter(source => {\r\n                return source.registeredCreeps.indexOf(creep.id) > -1\r\n            })[0]\r\n\r\n            // when creep has no Source write informations to console.log\r\n            if(sourceToReturn === undefined){\r\n                sourceToReturn = sources.map((source:Source) => {\r\n                    if(source.amountOfSupportCreeps > 0){\r\n                        let container:Object = source.pos.findClosestByRange(FIND_STRUCTURES,{\r\n                            filter: (structure:Container|Structure) => {\r\n                                return structure.structureType === \"container\"\r\n                            }\r\n                        })\r\n                        if(container !== null){\r\n                            if(container.registeredCreeps === undefined){\r\n                                container.registeredCreeps=[]\r\n                            }\r\n                            // if(_.size(container.registeredCreeps) < 3){\r\n                                container.registeredCreeps = [].concat(container.registeredCreeps, creep.id)\r\n                            // }\r\n\r\n                            Memory.proxyContainer.id = container.id\r\n                            return container\r\n                        }\r\n                    }\r\n                })[0]\r\n            }\r\n            return sourceToReturn\r\n        })\r\n    }\r\n}\r\n\r\nmodule.exports = creepsHelp"]}