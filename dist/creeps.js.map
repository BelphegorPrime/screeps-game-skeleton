{"version":3,"sources":["creeps.ts"],"names":["output","require","generalFunctions","roleBuilder","roleLoader","settings","getSettingsForLevel","creepsHelp","getCreeps","allCreeps","rooms","constructionSites","subTimeStart","Game","cpu","getUsed","creeps","_","values","harvester","generalSettings","roles","upgrader","builder","loader","map","SourcesToMoveTo","getAvailableSources","size","reverse","value","noProxySource","filter","source","undefined","Memory","sources","room","name","id","proxySource","minHarvester","creep","memory","role","fallbackSource","proxysource","numberOfBuilder","getNumberOfBuilder","numberOfLoader","getNumberOfLoader","notFullContainer","containerToTransfer","container","isFull","containers","find","FIND_STRUCTURES","structure","structureType","STRUCTURE_CONTAINER","registeredCreeps","energyAvailable","costs","little","index","indexOf","type","sourceproxy","duration","toFixed","workTimes","spawnCreeps","spawns","spawn","littleCreeps","mediumCreeps","bigCreeps","numberLittleCreeps","creepNumber","getUnitNumber","newName","createCreep","WORK","CARRY","MOVE","getRandomID","console","log","canBuildMediumCreep","numberMediumCreeps","mediumCreepNumber","canBuildBigCreep","numberBigCreeps","bigCreepNumber","spawnSourceProxy","sourcesWithOneSlot","amountOfSourceproxyCreeps","writeToDebug","amountOfCreeps","proxyCreeps","proxyCreepPresent","proxyCreep","FIND_SOURCES","energy","amountOfSources","maxCreeps","Math","round","sourceIndex","amountOfSurroundingWalls","terrain","pos","x","y","amountOfSupportCreeps","concat","sourceToReturn","findClosestByRange","proxyContainer","module","exports"],"mappings":"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","file":"creeps.js","sourcesContent":["let output = require('./output')\r\nlet generalFunctions = require('./general')\r\nlet roleBuilder = require('./role.builder')\r\nlet roleLoader = require('./role.loader')\r\nlet settings = require('./settings').getSettingsForLevel()\r\n\r\nlet creepsHelp = {\r\n    getCreeps: (allCreeps, rooms, constructionSites)=>{\r\n        let subTimeStart=Game.cpu.getUsed()\r\n        let creeps = _.values(allCreeps)\r\n        let harvester = settings.generalSettings.roles.harvester\r\n        let upgrader = settings.generalSettings.roles.upgrader\r\n        let builder = settings.generalSettings.roles.builder\r\n        let loader = settings.generalSettings.roles.loader\r\n\r\n        _.map(rooms, room =>{\r\n            let SourcesToMoveTo = _(creepsHelp.getAvailableSources(creeps, _.size(allCreeps))).reverse().value()\r\n            let noProxySource = SourcesToMoveTo.filter(source => source!== undefined && Memory.sources[room.name][source.id] !== undefined && Memory.sources[room.name][source.id][\"availableSlots\"] !== 1)[0]\r\n            let proxySource = SourcesToMoveTo.filter(source => source!== undefined && Memory.sources[room.name][source.id] !== undefined && Memory.sources[room.name][source.id][\"availableSlots\"] === 1)[0]\r\n\r\n            if(_.size(creeps) <= settings.minHarvester){\r\n                creeps= creeps.map(creep =>{\r\n                    creep.memory.role = harvester\r\n                    creep.memory.source = noProxySource\r\n                    creep.memory.fallbackSource = noProxySource\r\n                    creep.memory.proxysource = proxySource\r\n                    return creep\r\n                })\r\n                return creeps\r\n            }\r\n\r\n            let numberOfBuilder = roleBuilder.getNumberOfBuilder(constructionSites)\r\n            let numberOfLoader = roleLoader.getNumberOfLoader(room)\r\n            let notFullContainer = room.containerToTransfer.filter(container => !container.isFull)\r\n            let containers = room.find(FIND_STRUCTURES, {\r\n                filter: (structure) => {\r\n                    return structure.structureType === STRUCTURE_CONTAINER && structure.registeredCreeps === undefined\r\n                }\r\n            })\r\n\r\n            if(room.energyAvailable >= settings.generalSettings.costs.little*2 && (_.size(notFullContainer) > 0 || _.size(containers) === 0)){\r\n                creeps= creeps.map((creep, index) =>{\r\n                    let source = SourcesToMoveTo.filter(source =>{\r\n                        if(source.registeredCreeps !== undefined){\r\n                            return source.registeredCreeps.indexOf(creep.id) > -1\r\n                        }else {\r\n                            return false\r\n                        }\r\n                    })[0]\r\n                    if(source !== undefined){\r\n                        if(creep.memory.type === settings.generalSettings.roles.sourceproxy && Memory.sources[creep.room.name][source.id] !== undefined && Memory.sources[creep.room.name][source.id][\"availableSlots\"] === 1){\r\n                            creep.memory.role = settings.generalSettings.roles.sourceproxy\r\n                            creep.memory.source = source\r\n                            creep.memory.fallbackSource = noProxySource\r\n                            creep.memory.proxysource = proxySource\r\n                        }else{\r\n                            if(index < numberOfBuilder ){\r\n                                creep.memory.role = builder\r\n                                creep.memory.source = source\r\n                                creep.memory.fallbackSource = noProxySource\r\n                                creep.memory.proxysource = proxySource\r\n                            }else if(index < numberOfBuilder+numberOfLoader){\r\n                                creep.memory.role = loader\r\n                                creep.memory.source = source\r\n                                creep.memory.fallbackSource = noProxySource\r\n                                creep.memory.proxysource = proxySource\r\n                            }else if(index < numberOfBuilder+numberOfLoader+2){\r\n                                creep.memory.role = harvester\r\n                                creep.memory.source = source\r\n                                creep.memory.fallbackSource = noProxySource\r\n                                creep.memory.proxysource = proxySource\r\n                            }else{\r\n                                creep.memory.role = upgrader\r\n                                creep.memory.source = source\r\n                                creep.memory.fallbackSource = noProxySource\r\n                                creep.memory.proxysource = proxySource\r\n                            }\r\n                        }\r\n                    }else{\r\n                        creep.memory.role = upgrader\r\n                        creep.memory.source = noProxySource\r\n                        creep.memory.fallbackSource = noProxySource\r\n                        creep.memory.proxysource = proxySource\r\n                    }\r\n                    return creep\r\n                })\r\n            }else{\r\n                creeps= creeps.map((creep, index) =>{\r\n                    let source = SourcesToMoveTo.filter(source =>{\r\n                        if(source !== undefined && source.registeredCreeps !== undefined){\r\n                            return source.registeredCreeps.indexOf(creep.id) > -1\r\n                        }else {\r\n                            return false\r\n                        }\r\n                    })[0]\r\n                    if(source !== undefined){\r\n                        if(creep.memory.type === settings.generalSettings.roles.sourceproxy &&  Memory.sources[creep.room.name][source.id] !== undefined && Memory.sources[creep.room.name][source.id][\"availableSlots\"] === 1){\r\n                            creep.memory.role = settings.generalSettings.roles.sourceproxy\r\n                            creep.memory.source = source\r\n                            creep.memory.fallbackSource = noProxySource\r\n                            creep.memory.proxysource = proxySource\r\n                        }else{\r\n                            if(index < numberOfBuilder ){\r\n                                creep.memory.role = builder\r\n                                creep.memory.source = source\r\n                                creep.memory.fallbackSource = noProxySource\r\n                                creep.memory.proxysource = proxySource\r\n                            }else if(index < numberOfBuilder+numberOfLoader){\r\n                                creep.memory.role = loader\r\n                                creep.memory.source = source\r\n                                creep.memory.fallbackSource = noProxySource\r\n                                creep.memory.proxysource = proxySource\r\n                            }else if(index < numberOfBuilder+numberOfLoader+2){\r\n                                creep.memory.role = upgrader\r\n                                creep.memory.source = source\r\n                                creep.memory.fallbackSource = noProxySource\r\n                                creep.memory.proxysource = proxySource\r\n                            }else{\r\n                                creep.memory.role = harvester\r\n                                creep.memory.source = source\r\n                                creep.memory.fallbackSource = noProxySource\r\n                                creep.memory.proxysource = proxySource\r\n                            }\r\n                        }\r\n                    }else{\r\n                        creep.memory.role = harvester\r\n                        creep.memory.source = noProxySource\r\n                        creep.memory.fallbackSource = noProxySource\r\n                        creep.memory.proxysource = proxySource\r\n                    }\r\n                    return creep\r\n                })\r\n            }\r\n        })\r\n        let duration=(Game.cpu.getUsed()-subTimeStart).toFixed(0);\r\n        output.workTimes(\"CREEPS GET ROLE TOOK                 \"+duration)\r\n        return creeps\r\n    },\r\n    spawnCreeps: (rooms, spawns, creeps)=>{\r\n        let subTimeStart=Game.cpu.getUsed();\r\n        _.map(rooms, room =>{\r\n            _.map(spawns, spawn=>{\r\n                if(room.name === spawn.room.name){\r\n                    let littleCreeps = creeps.filter(creep => creep.memory.type === \"little\")\r\n                    let mediumCreeps = creeps.filter(creep => creep.memory.type === \"medium\")\r\n                    let bigCreeps = creeps.filter(creep => creep.memory.type === \"big\")\r\n                    if(_.size(littleCreeps) < settings.numberLittleCreeps){\r\n                        let creepNumber =generalFunctions.getUnitNumber(littleCreeps)\r\n                        let newName = spawn.createCreep(\r\n                            [WORK,CARRY,MOVE],\r\n                            \"LittleCreep-\"+creepNumber+\"|\"+generalFunctions.getRandomID(),\r\n                            {role: settings.generalSettings.roles.harvester, type: \"little\"}\r\n                        )\r\n                        console.log('Spawning new littleCreep ' + newName+\" within the room \"+room.name)\r\n                    }\r\n\r\n                    if(room.canBuildMediumCreep && _.size(mediumCreeps) < settings.numberMediumCreeps){\r\n                        let mediumCreepNumber =generalFunctions.getUnitNumber(mediumCreeps)\r\n                        let newName = spawn.createCreep(\r\n                            [WORK,WORK,WORK,WORK,CARRY,MOVE,MOVE],\r\n                            \"MediumCreep-\"+mediumCreepNumber+\"|\"+generalFunctions.getRandomID(),\r\n                            {role: settings.generalSettings.roles.harvester, type: \"medium\"}\r\n                        )\r\n                        console.log('Spawning new mediumCreep ' + newName+\" within the room \"+room.name)\r\n                    }\r\n\r\n                    if(room.canBuildBigCreep && _.size(bigCreeps) < settings.numberBigCreeps){\r\n                        let bigCreepNumber =generalFunctions.getUnitNumber(bigCreeps)\r\n                        let newName = spawn.createCreep(\r\n                            [WORK,WORK,WORK,WORK,WORK,CARRY,CARRY,CARRY,MOVE,MOVE,MOVE],\r\n                            \"BigCreep-\"+bigCreepNumber+\"|\"+generalFunctions.getRandomID(),\r\n                            {role: settings.generalSettings.roles.harvester, type: \"big\"}\r\n                        )\r\n                        console.log('Spawning new bigCreep ' + newName+\" within the room \"+room.name)\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        let duration=(Game.cpu.getUsed()-subTimeStart).toFixed(0);\r\n        output.workTimes(\"SPAWN CREEPS TOOK                    \"+duration)\r\n    },\r\n    spawnSourceProxy: (rooms, spawns, creeps)=>{\r\n        _.map(rooms, room =>{\r\n            _.map(spawns, spawn=>{\r\n                let sourcesWithOneSlot = _.filter(Memory.sources[room.name], source => source[\"availableSlots\"] === 1)\r\n                if(_.size(sourcesWithOneSlot) > 0){\r\n                    let amountOfSourceproxyCreeps = _.size(_.filter(creeps, creep => creep.memory.type === \"sourceproxy\"))\r\n                    output.writeToDebug(amountOfSourceproxyCreeps)\r\n                    if(room.canBuildBigCreep && _.size(creeps)>3 && amountOfSourceproxyCreeps === 0){\r\n                        spawn.createCreep([WORK,WORK,WORK,WORK,WORK,WORK,WORK,CARRY,MOVE],\"sourceproxy\",{role: \"sourceproxy\", type: \"sourceproxy\"})\r\n                        output.writeToDebug(\"Spawning new Big SOURCEPROXY within the room \"+room.name)\r\n                    }else{\r\n                        if(room.canBuildMediumCreep && _.size(creeps)>3 && amountOfSourceproxyCreeps === 0){\r\n                            spawn.createCreep([WORK,WORK,WORK,CARRY,MOVE],\"sourceproxy\",{role: \"sourceproxy\", type: \"sourceproxy\"})\r\n                            output.writeToDebug(\"Spawning new Medium SOURCEPROXY within the room \"+room.name)\r\n                        }else {\r\n                            if(_.size(creeps)>3 && amountOfSourceproxyCreeps === 0){\r\n                                spawn.createCreep([WORK,WORK,CARRY,MOVE],\"sourceproxy\",{role: \"sourceproxy\", type: \"sourceproxy\"})\r\n                                output.writeToDebug(\"Spawning new Little SOURCEPROXY within the room \"+room.name)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    },\r\n    getAvailableSources: (creeps, amountOfCreeps)=>{\r\n        let proxyCreeps= _.filter(creeps, creep => creep.memory.type === settings.generalSettings.roles.sourceproxy)\r\n        let proxyCreepPresent = !!_.size(proxyCreeps)\r\n        let proxyCreep = {}\r\n        if(!proxyCreepPresent){\r\n            creepsHelp.spawnSourceProxy(Game.rooms, Game.spawns, creeps)\r\n        }else{\r\n            proxyCreep = proxyCreeps[0]\r\n        }\r\n\r\n        return creeps.map(creep =>{\r\n            let sources = creep.room.find(FIND_SOURCES)\r\n            sources = sources.filter(source=> source.energy !== 0)\r\n            let amountOfSources = _.size(sources)\r\n            let maxCreeps = Math.round(amountOfCreeps/amountOfSources)\r\n\r\n            sources = sources.map((source, sourceIndex)=>{\r\n                if(Memory.sources[creep.room.name][source.id][\"availableSlots\"] === undefined){\r\n                    output.writeToDebug(\"Memory.sources[creep.room.name][source.id]['availableSlots'] ist für \"+source.id+\" undefined\")\r\n                    let amountOfSurroundingWalls = 0\r\n                    if(Memory.terrain[creep.room.name][source.pos.x - 1] !== undefined &&\r\n                        Memory.terrain[creep.room.name][source.pos.x] !== undefined &&\r\n                        Memory.terrain[creep.room.name][source.pos.x + 1] !== undefined){\r\n\r\n                        if (Memory.terrain[creep.room.name][source.pos.x - 1][source.pos.y - 1].terrain[0] === \"wall\") {\r\n                            amountOfSurroundingWalls += 1\r\n                        }\r\n                        if (Memory.terrain[creep.room.name][source.pos.x][source.pos.y - 1].terrain[0] === \"wall\") {\r\n                            amountOfSurroundingWalls += 1\r\n                        }\r\n                        if(Memory.terrain[creep.room.name][source.pos.x+1][source.pos.y-1].terrain[0] === \"wall\"){\r\n                            amountOfSurroundingWalls += 1\r\n                        }\r\n                        if(Memory.terrain[creep.room.name][source.pos.x-1][source.pos.y].terrain[0] === \"wall\"){\r\n                            amountOfSurroundingWalls += 1\r\n                        }\r\n                        if(Memory.terrain[creep.room.name][source.pos.x+1][source.pos.y].terrain[0] === \"wall\"){\r\n                            amountOfSurroundingWalls += 1\r\n                        }\r\n                        if(Memory.terrain[creep.room.name][source.pos.x-1][source.pos.y+1].terrain[0] === \"wall\"){\r\n                            amountOfSurroundingWalls += 1\r\n                        }\r\n                        if(Memory.terrain[creep.room.name][source.pos.x][source.pos.y+1].terrain[0] === \"wall\"){\r\n                            amountOfSurroundingWalls += 1\r\n                        }\r\n                        if(Memory.terrain[creep.room.name][source.pos.x+1][source.pos.y+1].terrain[0] === \"wall\"){\r\n                            amountOfSurroundingWalls += 1\r\n                        }\r\n                    }\r\n\r\n                    Memory.sources[creep.room.name][source.id][\"availableSlots\"] = 8 - amountOfSurroundingWalls\r\n                }\r\n\r\n                let sourcesWithOneSlot = _.filter(Memory.sources[creep.room.name], source => source[\"availableSlots\"] === 1)\r\n                source.amountOfSupportCreeps = 0\r\n                if(_.size(sourcesWithOneSlot) > 0){\r\n                    if(Memory.sources[creep.room.name][source.id][\"availableSlots\"] === 1){\r\n                        maxCreeps = 1\r\n                        source.amountOfSupportCreeps = Math.round(amountOfCreeps/amountOfSources) - 1\r\n                    }else {\r\n                        maxCreeps = Math.round(amountOfCreeps/amountOfSources)\r\n                        source.amountOfSupportCreeps = 0\r\n                    }\r\n                }\r\n\r\n                if(source.registeredCreeps === undefined){\r\n                    source.registeredCreeps=[]\r\n                }\r\n                if(sourceIndex > 0){\r\n                    if(sources[0].registeredCreeps.indexOf(creep.id)  <= -1 && _.size(source.registeredCreeps) < maxCreeps){\r\n                        source.registeredCreeps = [].concat(source.registeredCreeps, creep.id)\r\n                    }\r\n                }else{\r\n                    if(maxCreeps===1){\r\n                        if(proxyCreepPresent && proxyCreep.id !== undefined && creep.memory.type === settings.generalSettings.roles.sourceproxy){\r\n                            source.registeredCreeps = [].concat(source.registeredCreeps, creep.id)\r\n                        }\r\n                    }\r\n                    if(_.size(source.registeredCreeps) < maxCreeps){\r\n                        source.registeredCreeps = [].concat(source.registeredCreeps, creep.id)\r\n                    }\r\n                }\r\n                return source\r\n            })\r\n\r\n            let sourceToReturn = sources.filter(source => {\r\n                return source.registeredCreeps.indexOf(creep.id) > -1\r\n            })[0]\r\n\r\n            // when creep has no Source write informations to console.log\r\n            if(sourceToReturn === undefined){\r\n                sourceToReturn = sources.map(source => {\r\n                    if(source.amountOfSupportCreeps > 0){\r\n                        let container = source.pos.findClosestByRange(FIND_STRUCTURES,{\r\n                            filter: (structure) => {\r\n                                return structure.structureType === STRUCTURE_CONTAINER\r\n                            }\r\n                        })\r\n                        if(container !== null){\r\n                            if(container.registeredCreeps === undefined){\r\n                                container.registeredCreeps=[]\r\n                            }\r\n                            // if(_.size(container.registeredCreeps) < 3){\r\n                                container.registeredCreeps = [].concat(container.registeredCreeps, creep.id)\r\n                            // }\r\n\r\n                            Memory.proxyContainer.id = container.id\r\n                            return container\r\n                        }\r\n                    }\r\n                })[0]\r\n            }\r\n            return sourceToReturn\r\n        })\r\n    }\r\n}\r\n\r\nmodule.exports = creepsHelp"]}