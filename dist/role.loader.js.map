{"version":3,"sources":["role.loader.ts"],"names":["output","require","settings","getSettingsForLevel","routerHelper","roleLoader","run","creep","carry","energy","carryCapacity","Memory","enemys","room","name","energyAvailable","energyCapacityAvailable","container","pos","findClosestByRange","FIND_STRUCTURES","filter","structure","structureType","STRUCTURE_CONTAINER","store","RESOURCE_ENERGY","storeCapacity","transfer","ERR_NOT_IN_RANGE","routeCreep","visualizePathStyle","stroke","tower","STRUCTURE_TOWER","energyCapacity","upgradeController","controller","target","STRUCTURE_EXTENSION","STRUCTURE_SPAWN","memory","source","undefined","withdraw","harvest","fallbackSource","FIND_SOURCES","getNumberOfLoader","structures","find","generalSettings","costs","little","_","size","maxLoader","module","exports"],"mappings":"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","file":"role.loader.js","sourcesContent":["let output = require('./output')\r\nlet settings = require('./settings').getSettingsForLevel()\r\nlet routerHelper = require('./router')\r\nlet roleLoader = {\r\n\r\n    run: (creep) =>{\r\n        if(creep.carry.energy === creep.carryCapacity || creep.carry.energy >= 50) {\r\n            if(Memory.enemys[creep.room.name] <= 0 && creep.room.energyAvailable === creep.room.energyCapacityAvailable) {\r\n                let container = creep.pos.findClosestByRange(FIND_STRUCTURES, {\r\n                    filter: (structure) => {\r\n                        return structure.structureType === STRUCTURE_CONTAINER && structure.store[RESOURCE_ENERGY] < structure.storeCapacity\r\n                    }\r\n                })\r\n                if(container !== null) {\r\n                    if(creep.transfer(container, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\r\n                        routerHelper.routeCreep(creep, container, {visualizePathStyle: {stroke: '#ffffff'}})\r\n                    }\r\n                }\r\n            }\r\n            let tower = creep.pos.findClosestByRange(FIND_STRUCTURES, {\r\n                filter: (structure) => {\r\n                    return (structure.structureType === STRUCTURE_TOWER) &&\r\n                        (structure.energy < structure.energyCapacity)\r\n                }\r\n            })\r\n            if(tower!==null) {\r\n                if(creep.transfer(tower, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\r\n                    routerHelper.routeCreep(creep, tower, {visualizePathStyle: {stroke: '#ffffff'}})\r\n                }\r\n            }else {\r\n                if(creep.room.energyAvailable === creep.room.energyCapacityAvailable){\r\n                    if(creep.upgradeController(creep.room.controller) === ERR_NOT_IN_RANGE) {\r\n                        routerHelper.routeCreep(creep, creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}})\r\n                    }\r\n                }else{\r\n                    let target = creep.pos.findClosestByRange(FIND_STRUCTURES, {\r\n                        filter: (structure) => {\r\n                            return (structure.structureType === STRUCTURE_EXTENSION ||\r\n                                structure.structureType === STRUCTURE_SPAWN) &&\r\n                                (structure.energy < structure.energyCapacity)\r\n                        }\r\n                    })\r\n                    if(target!==null){\r\n                        if(creep.transfer(target, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\r\n                            routerHelper.routeCreep(creep, target, {visualizePathStyle: {stroke: '#ffffff'}})\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if(creep.memory.source !== undefined){\r\n                if(creep.memory.source.structureType === \"container\"){\r\n                    if(creep.memory.source.store.energy > 0){\r\n                        if(creep.withdraw(creep.memory.source, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\r\n                            routerHelper.routeCreep(creep, creep.memory.source, {visualizePathStyle: {stroke: '#ffaa00'}})\r\n                        }\r\n                    }else{\r\n                        if(creep.harvest(creep.memory.fallbackSource) === ERR_NOT_IN_RANGE) {\r\n                            routerHelper.routeCreep(creep, creep.memory.fallbackSource, {visualizePathStyle: {stroke: '#ffaa00'}})\r\n                        }\r\n                    }\r\n                }else{\r\n                    if(creep.harvest(creep.memory.source) === ERR_NOT_IN_RANGE) {\r\n                        routerHelper.routeCreep(creep, creep.memory.source, {visualizePathStyle: {stroke: '#ffaa00'}})\r\n                    }\r\n                }\r\n            }else{\r\n                let source = creep.pos.findClosestByRange(FIND_SOURCES)\r\n                if(creep.harvest(source) === ERR_NOT_IN_RANGE) {\r\n                    routerHelper.routeCreep(creep, source, {visualizePathStyle: {stroke: '#ffaa00'}})\r\n                }\r\n            }\r\n        }\r\n    },\r\n    getNumberOfLoader: (room)=>{\r\n        let structures = room.find(FIND_STRUCTURES, {\r\n            filter: (structure) => {\r\n                return structure.structureType === STRUCTURE_TOWER || structure.structureType === STRUCTURE_CONTAINER\r\n            }\r\n        })\r\n        if(room.energyAvailable >= settings.generalSettings.costs.little*2 && _.size(structures) > 0){\r\n            return settings.maxLoader\r\n        }\r\n        return 1\r\n    }\r\n}\r\n\r\nmodule.exports = roleLoader"]}