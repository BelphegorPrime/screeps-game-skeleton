{"version":3,"sources":["role.harvester.ts"],"names":["output","require","routerHelper","roleHarvester","run","creep","carry","energy","carryCapacity","subTimeHarvesterDelivery","Game","cpu","getUsed","deliver","durationHarvesterRunDelivery","toFixed","writeToDebug","subTimeHarvesterGetEnergy","getEnergy","durationHarvesterRunGetEnergy","room","energyAvailable","energyCapacityAvailable","_","size","containerToTransfer","towers","find","FIND_STRUCTURES","filter","structure","structureType","STRUCTURE_TOWER","energyCapacity","length","transfer","RESOURCE_ENERGY","ERR_NOT_IN_RANGE","routeCreep","visualizePathStyle","stroke","upgradeController","controller","containers","STRUCTURE_CONTAINER","store","storeCapacity","target","pos","findClosestByRange","STRUCTURE_EXTENSION","STRUCTURE_SPAWN","FIND_DROPPED_ENERGY","pickup","memory","source","undefined","withdraw","harvest","fallbackSource","ticksToRegeneration","proxysource","FIND_SOURCES","module","exports"],"mappings":"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","file":"role.harvester.js","sourcesContent":["let output = require('./output')\r\nlet routerHelper = require('./router')\r\nlet roleHarvester = {\r\n\r\n    // TODO OPTIMISE RUN FUNCTION\r\n    run: (creep) =>{\r\n        if(creep.carry.energy === creep.carryCapacity || creep.carry.energy >= 50) {\r\n            let subTimeHarvesterDelivery=Game.cpu.getUsed();\r\n            roleHarvester.deliver(creep)\r\n            let durationHarvesterRunDelivery=(Game.cpu.getUsed()-subTimeHarvesterDelivery).toFixed(0);\r\n            if(durationHarvesterRunDelivery > 1){\r\n                output.writeToDebug(\"HARVESTER---DELIVERY-------->\"+durationHarvesterRunDelivery)\r\n            }\r\n        } else {\r\n            let subTimeHarvesterGetEnergy=Game.cpu.getUsed();\r\n            roleHarvester.getEnergy(creep)\r\n            let durationHarvesterRunGetEnergy=(Game.cpu.getUsed()-subTimeHarvesterGetEnergy).toFixed(0);\r\n            if(durationHarvesterRunGetEnergy > 1){\r\n                output.writeToDebug(\"HARVESTER---GETENERGY------->\"+durationHarvesterRunGetEnergy)\r\n            }\r\n        }\r\n\r\n    },\r\n    deliver: (creep) =>{\r\n        if(creep.room.energyAvailable === creep.room.energyCapacityAvailable){\r\n            if(_.size(creep.room.containerToTransfer) <= 0){\r\n                let towers = creep.room.find(FIND_STRUCTURES, {\r\n                    filter: (structure) => {\r\n                        return (structure.structureType === STRUCTURE_TOWER) &&\r\n                            (structure.energy < structure.energyCapacity)\r\n                    }\r\n                })\r\n                if(towers.length > 0) {\r\n                    if(creep.transfer(towers[0], RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\r\n                        routerHelper.routeCreep(creep, towers[0], {visualizePathStyle: {stroke: '#ffffff'}})\r\n                    }\r\n                }else {\r\n                    if(creep.upgradeController(creep.room.controller) === ERR_NOT_IN_RANGE) {\r\n                        routerHelper.routeCreep(creep, creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}})\r\n                    }\r\n                }\r\n            }else {\r\n                let containers = creep.room.find(FIND_STRUCTURES, {\r\n                    filter: (structure) => {\r\n                        return structure.structureType === STRUCTURE_CONTAINER && structure.store[RESOURCE_ENERGY] < structure.storeCapacity\r\n                    }\r\n                })\r\n                if(containers.length > 0) {\r\n                    if(creep.transfer(containers[0], RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\r\n                        routerHelper.routeCreep(creep, containers[0], {visualizePathStyle: {stroke: '#ffffff'}})\r\n                    }\r\n                }else{\r\n                    if(creep.upgradeController(creep.room.controller) === ERR_NOT_IN_RANGE) {\r\n                        routerHelper.routeCreep(creep, creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}})\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let target = creep.pos.findClosestByRange(FIND_STRUCTURES, {\r\n            filter: (structure) => {\r\n                return (structure.structureType === STRUCTURE_EXTENSION ||\r\n                    structure.structureType === STRUCTURE_SPAWN) &&\r\n                    (structure.energy < structure.energyCapacity)\r\n            }\r\n        })\r\n        if(target!==null){\r\n            if(creep.transfer(target, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\r\n                routerHelper.routeCreep(creep, target, {visualizePathStyle: {stroke: '#ffffff'}})\r\n            }\r\n        }\r\n    },\r\n    getEnergy: (creep)=>{\r\n        let target = creep.pos.findClosestByRange(FIND_DROPPED_ENERGY);\r\n        if(target) {\r\n            if(creep.pickup(target) === ERR_NOT_IN_RANGE) {\r\n                routerHelper.routeCreep(creep, target, {visualizePathStyle: {stroke: '#ffaa00'}})\r\n            }\r\n        }else{\r\n            if(creep.memory.source !== undefined){\r\n                if(creep.memory.source.structureType === \"container\"){\r\n                    if(creep.memory.source.store.energy > 0){\r\n                        if(creep.withdraw(creep.memory.source, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\r\n                            routerHelper.routeCreep(creep, creep.memory.source, {visualizePathStyle: {stroke: '#ffaa00'}})\r\n                        }\r\n                    }else{\r\n                        if(creep.harvest(creep.memory.fallbackSource) === ERR_NOT_IN_RANGE) {\r\n                            routerHelper.routeCreep(creep, creep.memory.fallbackSource, {visualizePathStyle: {stroke: '#ffaa00'}})\r\n                        }\r\n                    }\r\n                }else{\r\n                    if(creep.memory.source.ticksToRegeneration > 75 && creep.memory.source.energy === 0){\r\n                        if(creep.harvest(creep.memory.proxysource) === ERR_NOT_IN_RANGE) {\r\n                            routerHelper.routeCreep(creep, creep.memory.proxysource, {visualizePathStyle: {stroke: '#ffaa00'}})\r\n                        }\r\n                    }else {\r\n                        if(creep.harvest(creep.memory.source) === ERR_NOT_IN_RANGE) {\r\n                            routerHelper.routeCreep(creep, creep.memory.source, {visualizePathStyle: {stroke: '#ffaa00'}})\r\n                        }\r\n                    }\r\n                }\r\n            }else{\r\n                let source = creep.pos.findClosestByRange(FIND_SOURCES)\r\n                if(creep.harvest(source) === ERR_NOT_IN_RANGE) {\r\n                    routerHelper.routeCreep(creep, source, {visualizePathStyle: {stroke: '#ffaa00'}})\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = roleHarvester"]}